# SPDX-FileCopyrightText: 2025 CERN
#
# SPDX-License-Identifier: GPL-3.0-or-later

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "external_pull_request_event" || $CI_PIPELINE_SOURCE == "web"
    - if: $CI_COMMIT_TAG != null

# Most of the content below is based on https://gitlab.cern.ch/gitlabci-examples/build_docker_image/-/blob/master/.gitlab-ci.yml
stages:
  - licensing-check
  - build
  - test
  - deploy

reuse-lint:
  image:
    name: registry.cern.ch/docker.io/fsfe/reuse
    entrypoint: [""]
  stage: licensing-check
  script:
    - cd $CI_PROJECT_DIR
    - reuse lint

docker-build:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  stage: build
  script:
    # Prepare Kaniko configuration file
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_DEPLOY_USER\",\"password\":\"$CI_DEPLOY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    # Build and push the image from the Dockerfile at the root of the project.
    - |
      if [[ "$CI_COMMIT_TAG" != "" ]]; then
        IMAGE_DESTINATION=gitlab-registry.cern.ch/adaptyst/adaptyst-analyser:latest
        IMAGE_DESTINATION_NAMED=gitlab-registry.cern.ch/adaptyst/adaptyst-analyser:$CI_COMMIT_TAG
        /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $IMAGE_DESTINATION --destination $IMAGE_DESTINATION_NAMED
      else
        IMAGE_DESTINATION=gitlab-registry.cern.ch/adaptyst/adaptyst-analyser:branch-$CI_COMMIT_BRANCH
        /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $IMAGE_DESTINATION
      fi
    # Print the full registry path of the pushed image
    - echo "Image pushed successfully to ${IMAGE_DESTINATION}"

docker-test:
  image:
    name: gitlab-registry.cern.ch/adaptyst/adaptyst-analyser:branch-$CI_COMMIT_BRANCH
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_TAG == null
  stage: test
  script:
    - cd $CI_PROJECT_DIR
    - pytest

docker-test-main:
  image:
    name: gitlab-registry.cern.ch/adaptyst/adaptyst-analyser:latest
    entrypoint: [""]
  rules:
    - if: $CI_COMMIT_TAG != null
  stage: test
  script:
    - cd $CI_PROJECT_DIR
    - pytest

syclops-pviewer-deploy:
  # Based on https://paas.docs.cern.ch/2._Deploy_Applications/Deploy_Docker_Image/2-automatic-redeployments/#integrate-redeployment-in-ci-workflow
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG != null
  image: gitlab-registry.cern.ch/paas-tools/openshift-client:latest
  variables:
    SERVER: https://api.paas.okd.cern.ch
    PROJECT: syclops-pviewer
    APP_NAME: profilingviewer
  script:
    - oc login $SERVER --token=$DEPLOY_TOKEN
    - oc project $PROJECT
    - oc import-image $APP_NAME --all
    - sleep 10 && oc rollout status deployment/$APP_NAME
